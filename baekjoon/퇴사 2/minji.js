/**
 * 퇴사 전까지 얻을 수 있는 최대 이익 출력
 * DP 이용
 * ex) 1일차(3, 10) 2일차(5, 20) 3일차(1, 10) 4일차(1, 20) 5일차(2, 15) 6일차(4, 40) 7일차(2, 200)
 * 일자 1일차 2일차 3일차 4일차 5일차 6일차 7일차
 * 이익  0    0    10   0    0    0   0
 * 일자 1일차 2일차 3일차 4일차 5일차 6일차 7일차
 * 이익  0    0    10   0    0    20  0
 * 일자 1일차 2일차 3일차 4일차 5일차 6일차 7일차
 * 이익  0    0    10   0    0    20  0
 * 일자 1일차 2일차 3일차 4일차 5일차 6일차 7일차
 * 이익  0    0    10   30   0    20  0
 * 일자 1일차 2일차 3일차 4일차 5일차 6일차 7일차
 * 이익  0    0    10   30   30   45  0
 * 일자 1일차 2일차 3일차 4일차 5일차 6일차 7일차
 * 이익  0    0    10   30   30   45  45
 */

const fs = require('fs');
const input = fs.readFileSync('/dev/stdin').toString().split('\n');

const N = +input[0]; // 퇴사까지 남은 기간

const dp = Array.from({ length: N + 1 }, () => 0); // dp 생성(N일차까지 일했을 때 얻을 수 있는 최대이익)

for (let i = 1; i <= N; i++) {
    const [t, p] = input[i].split(' ').map(Number);
    dp[i] = Math.max(dp[i - 1], dp[i]); // 현재 날짜 최대값 갱신

    if (i + t <= N + 1) {
        dp[i + t - 1] = Math.max(dp[i + t - 1], dp[i - 1] + p); // 상담 종료 후 받을 수 있는 최대이익 갱신
    }
}

console.log(dp[N]);
